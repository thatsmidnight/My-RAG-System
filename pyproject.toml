[tool.poetry]
name = "TTRPG AI RAG Assistant"
version = "0.1.0"
description = "Enable users to ask questions about the contents of specific TTRPG PDFs and receive accurate answers."
authors = ["thatsmidnight <10793854+thatsmidnight@users.noreply.github.com>"]
license = "CC BY-NC 4.0"
readme = "README.md"
packages = [
    { include = "models", from = "." },
    { include = "services", from = "." },
    { include = "utils", from = "." },
    { include = "app.py", from = "." }
]
package-mode = false

[tool.poetry.dependencies]
python = "~3.12"
pymupdf4llm = "^0.0.13"
chromadb = "^0.5.5"
google-generativeai = "^0.7.2"
fastapi = "^0.112.2"
gunicorn = "^23.0.0"
sentence-transformers = "^3.0.1"
langchain-community = "^0.2.11"
langchain-google-genai = "^1.0.8"
langchain-chroma = "^0.1.2"

[tool.poetry.group.dev.dependencies]
black = "^24.8.0"
isort = "^5.13.2"
uvicorn = "^0.30.6"
python-dotenv = "^1.0.1"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 78
target-version = ['py312']
skip-string-normalization = false
preview = true

[tool.isort]
profile = "black"
py_version = 312
line_length = 79
wrap_length = 78
only_sections = true
import_heading_stdlib = "Standard Library"
import_heading_future = "Future"
import_heading_firstparty = "First-Party"
import_heading_thirdparty = "Third-Party"
import_heading_localfolder = "Local Folder"
known_localfolder = "models,services,utils"
multi_line_output = 5
virtual_env = ".venv"
include_trailing_comma = true
use_parentheses = true
group_by_package = true
combine_straight_imports = false
combine_as_imports = true

[tool.coverage.run]
branch = true
source = ["models", "services", "utils", "app.py"]
omit = [
    "tests/*",
    "utils/enums.py"
]

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
